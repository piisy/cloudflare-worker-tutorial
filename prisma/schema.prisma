// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  output          = "./client"
}

generator zod {
  output                           = "./zod"
  provider                         = "zod-prisma-types"
  useMultipleFiles                 = true //
  writeBarrelFiles                 = true // 是否生成barrel文件(index.ts)用于导出所有类型
  createInputTypes                 = false //
  createModelTypes                 = true //
  addInputTypeValidation           = false //
  addIncludeType                   = false //
  addSelectType                    = false //
  validateWhereUniqueInput         = true //
  createOptionalDefaultValuesTypes = true //
  createRelationValuesTypes        = false //
  createPartialTypes               = true //
  useDefaultValidators             = false //
  coerceDate                       = true //
  writeNullishInModelTypes         = true //
  prismaClientPath                 = "#/prisma/client"
}

// This `datasource` file isn't used but Prisma ORM still requires the `datasource` definition.
// Your SQLite database file will be managed by D1:
// - A local version will exist in `.wrangler`.
// - The remote version is managed by Cloudflare in the Cloud.
datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  nickname  String?
  avatar    String?
  discordId String?  @unique
  githubId  String?  @unique
  googleId  String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  moments   Moment[]
  uploads   Upload[]

  @@map("users")
}

model Moment {
  id          Int                @id @default(autoincrement())
  type        String             @default("moment")
  content     String             @default("")
  attachments MomentsToUploads[]
  deleted     Boolean            @default(false)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  // User relation
  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@map("moments")
}

model MomentsToUploads {
  moment   Moment  @relation(fields: [momentId], references: [id])
  momentId Int
  upload   Upload  @relation(fields: [uploadId], references: [id])
  uploadId Int
  sort     Int     @default(0)
  deleted  Boolean @default(false)

  @@unique([momentId, uploadId], name: "unique_moment_upload")
  @@map("moments_to_uploads")
}

model Upload {
  id            Int      @id @default(autoincrement())
  hash          String
  thumbnailHash String   @default("")
  bucketName    String
  mediaType     String
  deleted       Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  moments MomentsToUploads[]

  // User relation
  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@map("uploads")
}
